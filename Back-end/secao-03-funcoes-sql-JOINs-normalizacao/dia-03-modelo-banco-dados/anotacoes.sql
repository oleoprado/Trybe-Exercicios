-- MODELAGEM E CRIAC√ÉO DE UM BANCO DE DADOS

--Serei capaz de:
--Modelar um banco de dados;
--Identificar entidades, atributos e relacionamentos;
--Construir um diagrama entidade-relacionamento (diagrama ER);
--Criar um banco de dados;
--Criar e modelar tabelas com base em um diagrama ER;
--Normalizar o banco de dados seguindo as Formas Normais.

-----------------------------------------------------------------------------

-- Database Design - Como modelar um banco de dados:

--1 Identificar as entidades, atributos e relacionamentos com base na descri√ß√£o do problema: Por exemplo, a entidade √°lbum possui os atributos t√≠tulo e pre√ßo e se relaciona com a entidade artista.

--2 Construir um diagrama entidade-relacionamento para representar as entidades encontradas no passo 1: O diagrama serve como um guia para que voc√™ possa visualizar as entidades (tabelas) que ir√£o se relacionar.

--3 Criar um banco de dados para conter suas tabelas: Ap√≥s analisar e criar um diagrama de como o seu banco de dados vai ser estruturado, voc√™ pode dar in√≠cio a cria√ß√£o dele.

--4 Criar e relacionar tabelas tendo o diagrama do passo 2 como base: Ap√≥s criar seu banco de dados, voc√™ pode come√ßar a criar e relacionar as tabelas de acordo com o diagrama.

-- 1) Identificando entidades, atributos e relacionamentos:
--ENTIDADES
-- S√£o uma representa√ß√£o de algo do mundo real dentro do banco de dados e que normalmente englobam toda uma ideia. S√£o armazenadas em formato de tabelas em um banco de dados.

--ATRIBUTOS
--Um atributo √© tudo aquilo que pode ser usado para descrever algo. Por exemplo, uma entidade pessoa pode ter nome, altura, peso e idade como atributos.

--RELACIONAMENTOS
--Os relacionamentos servem para representar como uma entidade deve estar ligada com outra(s) no banco de dados. H√° tr√™s tipos de relacionamentos poss√≠veis em um banco de dados, s√£o eles:
  --Relacionamento Um para Um (1..1):
--uma linha da Tabela A deve possuir apenas uma linha correspondente na Tabela B e vice-versa

  --Relacionamento Um para Muitos ou Muitos para Um (1..N):
--Esse √© um dos tipos mais comuns de relacionamento. Em cen√°rios assim, uma linha na Tabela A pode ter v√°rias linhas correspondentes na Tabela B, mas uma linha da Tabela B s√≥ pode possuir uma linha correspondente na Tabela A
--Ex: uma categoria pode estar ligada a v√°rios livros, embora um livro deva possuir apenas uma categoria.

  --Relacionamento Muitos para Muitos (N..N):
--acontece quando uma linha na Tabela A pode possuir muitas linhas correspondentes na Tabela B e vice-versa
--film_actor possui actor_id e film_id, dessa forma, ela serve como uma tabela auxiliar, tamb√©m chamada de tabela de jun√ß√£o que relaciona as tabelas actor e film. Esse tipo de relacionamento tamb√©m pode ser chamado de um para muitos ligados por um tabela intermedi√°ria.

-----------------------------------------------------------------------------

-- 2)Montando um diagrama mais detalhado
--Para diagramas ER (entidade-relacionamento) mais detalhados, deve-se incluir o nome das tabelas, suas chaves prim√°rias e estrangeiras, suas colunas e seus relacionamentos.

--Anota a√≠ üì£: A ideia de um diagrama ER √© prover uma representa√ß√£o gr√°fica para a estrutura de seu banco de dados, descrevendo suas entidades com seus atributos e como elas se relacionam. Essa visualiza√ß√£o pode te ajudar tanto a criar e modelar seu banco de dados quanto a entender se sua modelagem precisa ser alterada ou se houve algum erro ao pensar na organiza√ß√£o de suas entidades. Com esse diagrama voc√™ consegue pensar um pouco mais antes de come√ßar a escrever as queries para criar as tabelas.

-----------------------------------------------------------------------------

-- 3) Criando um banco de dados para conter suas tabelas
CREATE DATABASE nome_do_banco_de_dados; -- Cria um banco de dados com o nome especificado.

CREATE SCHEMA nome_do_banco_de_dados; -- Sin√¥nimo de CREATE DATABASE, tamb√©m cria um banco de dados.

-- Verifica se o banco de dados ainda n√£o existe.
CREATE DATABASE IF NOT EXISTS albuns; -- Essa verifica√ß√£o √© comumente utilizada junto ao CREATE DATABASE para evitar
-- a tentativa de criar um banco de dados duplicado, o que ocasionaria um erro.
IF NOT EXISTS nome_do_banco_de_dados;

-- Lista todos os bancos de dados existentes.
SHOW DATABASES;

-- Define o banco de dados ativo para uso no momento.
USE nome_do_banco_de_dados;

--** TIPOS DE DADOS **
-- Booleanos:
-- 1(true) ou 0(false) - default √© NULL - Ex: tinyint(1)

-- Caracteres:
-- Char(5) - permite inserir at√© uma qtd de caracteres informado entre ()
-- Varchar(10) - permite inserir at√© uma qtd de caracteres informado entre (), porem s√≥ ocupa o espa√ßo que for preenchido, ao contrario do char() que ocupara todo o espa√ßo

-- Numeros(inteiros):
-- Tinyint
-- Smallint
-- Mediumint
-- Int
-- Bigint

-- Numeros exatos com precisao decimal:
-- Decimal - permite definir qtd max de numeros e sua precisao.Ex: DECIMAL(5, 2) = 199.99
-- Float/Real - precis√£o de uma casa decimal. Ex: 10.9
-- Double - precisao de duas casas decimais. Ex: 49.90

-- Temporais:
-- DATE - Armazena no padr√£o YYYY-MM-DD
-- TIME - Armazena no padr√£o HH:MM:SS
-- YEAR - Armazena somente o ano entre 1901 e 2155;
-- DATETIME - YYYY-MM-DD HH:MM:SS - faixa de valores 1000-01-01 00:00:00 at√© 9999-12-31 23:59:59
-- TIMESTAMP - igual datetime, mas pode operar com base em fuso horario definido pelo servidor

----**** PRIMARY KEY e FOREIGN KEY ****----

--PRIMARY KEY
-- √© uma coluna ou grupo de colunas usadas para identificar uma linha em uma tabela.√â um identificador unico da tabela
--Ex de como inserir uma PRIMARY KEY
CREATE TABLE nome_tabela (
  nome_coluna tipo_de_dados PRIMARY KEY
  nome_coluna tipo_de_dados
)

--FOREIGN KEY
-- √© uma coluna ou grupo de colunas em uma tabela que identifica unicamente uma linha em outra tabela

-- PRIMARY KEY COMPOSTA
-- A chave composta √© aquela criada com duas ou mais colunas e, desta forma, passa a utilizar a jun√ß√£o desses dados para formar um valor √∫nico e assim bloquear a duplicidade
  DROP SCHEMA IF EXISTS brasil;
  CREATE SCHEMA brasil;
  USE brasil;

  CREATE TABLE cidades(
    cidade VARCHAR(100) NOT NULL,
    estado VARCHAR(10) NOT NULL,
    populacao INTEGER,
    CONSTRAINT PRIMARY KEY(cidade, estado)
  );

  INSERT INTO cidades(cidade, estado, populacao)
  VALUES('Rio Claro','SP',185421),
    ('Rio Claro','RJ',17216);
---

-- H√° muitas formas de grafia existentes, mas para manter uma padroniza√ß√£o e seguirmos a boa pr√°tica adotaremos a nota√ß√£o em "snake_case"
-- para construirmos nossos bancos de dados e tabelas.

DROP SCHEMA IF EXISTS trybe_flix;
CREATE SCHEMA trybe_flix;
USE trybe_flix;

-- Primeiro criamos a tabela actor
CREATE TABLE actor(
    actor_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL
);

-- E a tabela film
CREATE TABLE film(
    film_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL
);

-- E por fim, a tabela film_actor com a rela√ß√£o N:N

CREATE TABLE film_actor(
  actor_id INTEGER,
  film_id INTEGER,
  CONSTRAINT PRIMARY KEY(actor_id, film_id),
    FOREIGN KEY (actor_id) REFERENCES actor (actor_id),
    FOREIGN KEY (film_id) REFERENCES film (film_id)
);

-----------------------------------------------------------------------------

-- COMO CRIAR TABELA no MySQL

--Sintaxe:
CREATE TABLE nome_tabela (
  nome_coluna1 tipo CONSTRAINT, --n√£o necessariamente uma coluna precisa ter constraint(restri√ß√µes)
  nome_coluna2 tipo CONSTRAINT,
  nome_coluna3 tipo CONSTRAINT,
) ENGINE='nome_engine' --mecanismo de armazenamento do sql que permite utilizar FOREING KEY (default: ENGINE=InnoDB)

--Ex:
CREATE TABLE album(
	album_id INT PRIMARY KEY AUTO_INCREMENT,
    artist_id INT NOT NULL,
    titulo VARCHAR(100) NOT NULL,
    preco decimal(5,2) NOT NULL,
    estilo_id INT NOT NULL,
    FOREIGN KEY (artist_id) REFERENCES artista(artista_id),
    FOREIGN KEY (album_id) REFERENCES estilomusical(estilo_id)
) ENGINE=InnoDB;

CREATE TABLE estilomusical(
	estilo_id INT PRIMARY KEY AUTO_INCREMENT,
    nome VARCHAR(50) NOT NULL
) ENGINE=InnoDB;

-----------------------------------------------------------------------------

-- NORMALIZA√á√ÉO
-- Normaliza√ß√£o √© uma t√©cnica para organizar tabelas relacionadas no banco de dados com o objetivo de reduzir a redund√¢ncia de dados.

-- Problemas da redund√¢ncia de dados:
  -- tabelas ocupando espa√ßos desnecess√°rios,
  -- anomalia de inser√ß√£o,
  -- anomalia de atualiza√ß√£o,
  -- anomalia de exclus√£o

-- Com a normaliza√ß√£o nos temos:
  -- Separa√ß√£o de dados relacionados em suas pr√≥prias tabelas;
  -- Integridade de dados;
  -- Redu√ß√£o de espa√ßo gasto no banco de dados.


-- FORMAS DE NORMALIZA√á√ÉO:

  -- 1¬™ Forma Normal:

    --As tabelas devem ser escal√°veis(preparadas p/ grande qtd de dados);
    --As tavelas devem ser extens√≠veis(mudan√ßas n√£o devem quebrar a integridade dos dados);
  -- REGRAS:
    --Colunas devem possuir apenas um valor;
    --Valores em uma coluna devem ser do mesmo tipo de dados;
    --Cada coluna deve possuir um nome √∫nico;
    --A ordem dos dados registrados em uma tabela n√£o deve afetar a integridade dos dados.

  -- 2¬™ Forma Normal:

    --A tabela deve estar na 1¬™ Forma Normal;
    --A tabela n√£o deve possuir depend√™ncias parciais.
--obs: Uma depend√™ncia parcial pode ser considerada como qualquer coluna que n√£o depende exclusivamente da chave prim√°ria da tabela para existir

--A coluna curso pode ser considerada uma depend√™ncia parcial, pois √© poss√≠vel mover os valores dessa coluna para uma outra tabela exclusiva para cursos. Os dados dessa tabela exclusiva para cursos podem existir independente de existir uma pessoa estudante vinculada a esse curso ou n√£o. Dessa forma, depois de normalizar, ter√≠amos duas tabelas: Cursos(id, nome) e Pessoas_Estudadentes(id, nome, data_matricula, curso_id)

--*** Lembre-se que a fun√ß√£o da normaliza√ß√£o n√£o √© necessariamente reduzir o n√∫mero de colunas mas remover redund√¢ncias e poss√≠veis anomalias de inclus√£o, altera√ß√£o ou remo√ß√£o de dados.

  -- 3¬™ Forma Normal:

    --A tabela deve estar na 1¬™ e 2¬™ Formas Normais;
    --A tabela n√£o deve conter atributos (colunas) que n√£o sejam dependentes exclusivamente da PK (chave prim√°ria).