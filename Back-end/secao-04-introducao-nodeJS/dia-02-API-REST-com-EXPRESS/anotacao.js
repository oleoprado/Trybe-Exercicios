APIs WEB

// APIs Web s√£o ferramentas definitivas para conectar o front-end de uma aplica√ß√£o aos dados que ela precisa salvar e receber. O padr√£o REST, rotas e aplica√ß√µes C.R.U.D s√£o partes do conhecimento de como se fazer uma boa API 

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

MEU PRIMEIRO SERVIDOR NODE JS

//SERVIDORES
// servidores web s√£o programas de computador que entregam algum tipo de informa√ß√£o ou p√°gina a quem os solicita atrav√©s da internet. Toda vez que voc√™ abre seu navegador de internet e faz uma pesquisa no Google, √© um servidor web da Google que te ‚Äúresponde‚Äù, trazendo o resultado da sua busca a partir das p√°ginas e informa√ß√µes salvas no banco de dados da empresa.

// ALGUNS SERVIDORES WEB:
// -Apache HTTP Server;
// -NGINX;
// -Apache Tomcat;
// -Node.js; (Vamos focar neste).

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

EXPRESS

// CONFIGURACOES INICIAIS EXPRESS
//√â normal encontrarmos reposit√≥rios no GitHub com diferentes configura√ß√µes, mas geralmente mantendo um comportamento comum:

// - na raiz do projeto ficam arquivos de configura√ß√£o como: .gitignore, .eslintrc.json, package.json, docker-compose.yml e outros;
// - o c√≥digo da aplica√ß√£o fica em diret√≥rios como: src, app, ou similar.

// .eslintignore: Usado para voc√™ dizer ao ESLint que ignore arquivos e diret√≥rios espec√≠ficos;

// .eslintrc.json: Usado para voc√™ sobrescrever regras do ESLint;

// Dentro do arquivo .eslintignore, vamos ignorar apenas os arquivos que est√£o dentro do diret√≥rio node_modules.

// dentro do arquivo .eslintrc.json, voc√™ vai escrever o seguinte trecho de c√≥digo:
// .eslintrc.json
{
  "env": {
    "es2020": true
  },
  "extends": "trybe-backend",
    "rules": {
    "sonarjs/no-duplicate-string": ["error", 5]
  }
}

// fun√ß√£o get() recebe 2 parametros:
// - 1 param: '/' - rota (ex: /login, /produtos, /pessoas, /etc)

// - 2 param: (req, res) => {} - espera uma callback, esta funcao pode receber de 2 a 4 parametros:
//  - req: Essa √© a Request (ou requisi√ß√£o), √© por meio dela que recebemos os dados (envio por query, params e body);
//  - res: Essa √© a Response (ou resposta), √© por meio dela que respondemos o que nos √© solicitado.Podem ser respondidos de v√°rios jeitos, tais como:
//  -Formato text/JSON, como o caso do res.json({ message: 'Ol√° Mundo!' });
//  -Formato text/HTML, como o caso do res.send('<h1>Ol√° Mundo!</h1>');
//  -Redirecionamentos, como o caso do res.redirect('https://www.betrybe.com/');
//  -P√°ginas completas ou partes dela, como o caso do res.render('index.html');
//  -Finalizando, como o caso do res.end();


// De olho na dica üëÄ: associe os status a constantes nomeadas, desse modo voc√™ facilita a leitura! const OK = 200, const INTERNAL_SERVER_ERROR = 500 e const NOT_FOUND = 404 s√£o √≥timos come√ßos!

CRIANDO O SERVIDOR

// v√° ao diret√≥rio src e crie mais dois arquivos: um chamado app.js e o outro server.js.
// src/app.js
const express = require('express'); // importar o express

const app = express();

module.exports = app;


// src/server.js
const app = require('./app');

app.listen(3001, () => console.log('server running on port 3001')); // um listen

// O start √© provido pelo trecho app.listen... e dentro dele podemos passar at√© 2 par√¢metros:
// - Primeiro par√¢metro √© o port (ou porta): Aqui passamos 3001, mas poderia ser qualquer n√∫mero n√£o utilizado acima de 1023;
// - Segundo par√¢metro √© uma fun√ß√£o: Aqui passamos apenas um console.log exibindo uma mensagem ‚Äúque estamos no ar‚Äù;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

ROTAS

// No contexto de Back-end, rotas representam as portas de entrada para a sua API.
// As a√ß√µes do C.R.U.D.: Criar, ler, atualizar e remover. Pois √©, nossa API ter√° quatro rotas.
// De olho na dica üëÄ: Rotas podem ser chamadas de caminhos, paths e endpoints de uma API.

// Anota a√≠ üñä: uma rota √© a parte de uma URL que usamos para acessar uma API e fazer uma requisi√ß√£o a ela. Por meio da rota, na nossa aplica√ß√£o, requisitaremos acesso, cria√ß√£o, leitura ou remo√ß√£o de informa√ß√µes da nossa API de gerenciamento de times. 


STATUS CODE
// - 200: Que quer dizer ‚Äòok‚Äô;
// - 500: Que quer dizer erro no servidor;
// - 404: Este muitas pessoas j√° viram, ele quer dizer que a p√°gina n√£o foi encontrada;


PROTOCOLO HTTP

// Anota a√≠ üñä: Protocolo √© uma conven√ß√£o que padroniza algo. Neste caso, o protocolo HTTP √© uma conven√ß√£o que padroniza a conex√£o, comunica√ß√£o e transfer√™ncia de dados, entre dois sistemas.

//EXEMPLO:
HTTP/1.1 200 OK
Date: Sat, 09 Oct 2010 14:28:02 GMT
Server: Apache
Last-Modified: Tue, 01 Dec 2009 20:18:22 GMT
ETag: "51142bc1-7449-479b075b2891b"
Accept-Ranges: bytes
Content-Length: 29769
Content-Type: text/html

<!DOCTYPE html... (aqui v√™m os 29769 bytes da p√°gina solicitada)

// A vers√£o do protocolo (1.1 no nosso exemplo);

// O c√≥digo do status que diz se a requisi√ß√£o foi um sucesso ou n√£o. Nesse caso, deu certo, pois recebemos um c√≥digo 200, acompanhado de uma pequena mensagem descritiva (OK, nesse caso);

// Os headers no mesmo esquema da requisi√ß√£o. No caso do exemplo acima, o Content-Type diz para o navegador o que ele precisa fazer. No caso do HTML, ele deve renderizar o documento na p√°gina;

// Um body ou corpo (da requisi√ß√£o), que envia dados quando necess√°rio, sendo opcional. Por exemplo, caso voc√™ submeta um formul√°rio registrando um pedido em uma loja virtual, no corpo da resposta pode ser retornado o n√∫mero do pedido ou algo do tipo. Veremos exemplos logo mais!

//Note que tanto requisi√ß√µes quanto respostas podem ter headers e um body. No entanto, √© importante n√£o confundir uma coisa com a outra:

// - o body e os headers da requisi√ß√£o representam a informa√ß√£o que um cliente est√° enviando para o servidor;
// - o body e os headers da resposta representam a informa√ß√£o que o servidor est√° devolvendo para o cliente.

ENVIO DE REQUISICAO PARA O SERVIDOR

// Existem 3 formas de n√≥s enviarmos dados para um servidor, duas pela pr√≥pria URL e uma pelo corpo da requisi√ß√£o.

  GET 
// (Envio por consulta, ou req.query):
// Constru√ß√£o: /rota?variavel1=valor&variavel1=valor&variavelN=valor
// Explica√ß√£o:
// - /rota √© o caminho, por exemplo, /produtos, /pessoas, /pesquisa, ‚Ä¶;
// - ? √© o indicador que vamos passar dados em para a rota;
// - & √© o separador que se usa quando queremos enviar muitos dados;
// - variavelN √© uma chave identificadora, por exemplo, nome, frequenciaMinima, q, ‚Ä¶;
// - valor √© o valor da vari√°vel, por exemplo, nome=Tobias, frequenciaMinima=144, q=express, ‚Ä¶;

  POST
  // (Envio por corpo ou req.body)
  // Isso se d√° por duas quest√µes:
  // A primeira √© por seguran√ßa, que √© a mais importante! Imagine sua senha ou c√≥digo de seguran√ßa do seu cart√£o de cr√©dito escritos na URL do seu computador e quem est√° perto de voc√™ podendo ler. üò±
  
  // O segundo motivo √© pelo tamanho do que enviamos. Imagina que invi√°vel enviar todo um cadastro de um formul√°rio gigante pela URL! üòÅ