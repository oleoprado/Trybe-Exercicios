TIPOS DE TESTE

// - üëâ Testes unit√°rios: consideram um escopo limitado a um pequeno fragmento do seu c√≥digo com intera√ß√£o m√≠nima entre recursos externos.
// ex: 
// O motor precisa ser testado para saber se ele tem pot√™ncia e torque; j√° os pneus s√£o testados para saber se t√™m boa ader√™ncia no asfalto. Al√©m disso, testamos o assento do motorista para saber se √© confort√°vel e ergon√¥mico e tamb√©m o volante para saber se √© f√°cil manusear e ester√ßar.

// - üëâ Testes de integra√ß√£o: presumem a jun√ß√£o de m√∫ltiplos escopos (que tecnicamente devem possuir, cada um, seus pr√≥prios testes) com intera√ß√µes entre eles.
// ex:
// Voltando ao exemplo do carro, agora nos testes de integra√ß√£o, ao acelerar testamos se o motor permanece em uma velocidade constante e se, ao ester√ßar o volante, os pneus dianteiros s√£o orientados corretamente para a dire√ß√£o desejada. Al√©m disso, testamos se, ao se acomodar no assento da pessoa motorista, √© f√°cil manusear o volante e o c√¢mbio.

// - üëâ Testes de Ponta-a-ponta: tamb√©m chamados de Fim-a-fim (End-to-End; E2E), pressup√µem um fluxo de intera√ß√£o completo com a aplica√ß√£o, de uma ponta a outra.
// De olho na dica üëÄ: Esse teste √© o mais completo, pois necessita que todos os demais testes tenham sido desenvolvidos.
// ex:
// Ainda no exemplo do carro, no teste Ponta-a-Ponta (PaP) podemos fazer um test-drive de impacto para avaliar todos os aspectos, realizando, por exemplo, uma corrida com v√°rios carros em um circuito.

////////////////////////////////////////////////////////////////////////////////////////////////////////

TESTES AUTOMATIZADOS

MOCHA

// O mocha √© um framework de testes para JS, isso significa que ele nos ajuda a arquitetar os nossos testes fornecendo a estrutura e interface para escrevermos

// Utilizaremos a flag -D. Apesar de essenciais durante o desenvolvimento, esses m√≥dulos (ferramentas) n√£o ser√£o utilizados para executar a nossa aplica√ß√£o quando ela for publicada.

// INSTALAR MOCHA
// npm install -D mocha@10.0 chai@4.3

// Feita a instala√ß√£o, j√° podemos importar o mocha e o chai em um arquivo .js e escrever nossos testes.

describe('Quando a m√©dia for menor que 7', function () {
  it('retorna "reprova√ß√£o"', function () {
    //
  });
});

// Perceba que o describe aceita dois par√¢metros:(I) o primeiro √© uma string, onde podemos passar a descri√ß√£o, (II) o segundo √© uma fun√ß√£o para executar o cen√°rio de teste.

// Outro ponto de aten√ß√£o √©, que n√£o √© necess√°rio importar o mocha em nosso arquivo, pois suas palavras reservadas ser√£o interpretadas quando executarmos os testes,

// De olho na dica üëÄ: Veja que usamos a sintaxe function ao inv√©s de arrow functions. Essa sintaxe √© uma recomenda√ß√£o da pr√≥pria documenta√ß√£o do mocha.


AFERINDO TESTES COM O CHAI

// O chai nos ajudar√° com as asser√ß√µes, ou seja, ele nos fornece maneiras de dizermos o que queremos testar validando se o resultado condiz com o esperado.

// Anota a√≠ üñä: Para de fato testar nossa fun√ß√£o, precisamos cham√°-la passando o input desejado e ent√£o validar se a resposta √© aquela que esperamos. Essa valida√ß√£o √© o que chamamos de assertion, ‚Äúasser√ß√£o‚Äù ou, em alguns casos, ‚Äúafirma√ß√£o‚Äù.

// ‚ö†Ô∏è Aviso: Usaremos a interface expect do chai em nossos exemplos, que significa de fato o que √© esperado para determinada vari√°vel:
const { expect } = require('chai');
const resposta = calculaSituacao(4);

expect(resposta).equals('reprova√ß√£o');

// No c√≥digo acima, estamos chamando nossa fun√ß√£o. Logo em seguida, afirmamos que seu retorno armazenado na constante resposta, deve ser igual (equals) a reprova√ß√£o.

// Para tornar nosso teste ainda mais leg√≠vel e elegante, o chai nos fornece outros getters encade√°veis que possuem um papel puramente est√©tico.
// Por exemplo, o to e o be, que nos permitem escrever nossa assertion da seguinte maneira:
const { expect } = require('chai');

const calculaSituacao = require('../examples/calculaSituacao');

describe('Quando a m√©dia for menor que 7', function () {
  it('retorna "reprova√ß√£o"', function () {
    const resposta = calculaSituacao(4);

    expect(resposta).to.be.equals('reprova√ß√£o');
  });
});

// **** COLOCAR NO PACKAGE.JSON O SCRIPT "test": "mocha tests(dir)/**(dentro desse dir vai ter varios dir)/*.test.js --exit" *******

////////////////////////////////////////////////////////////////////////////////////////////////////////

CONTRATOS DE APIs

// Sempre que consumimos ou fornecemos um servi√ßo, como por exemplo uma API REST, precisamos ter os comportamentos predefinidos. Esses comportamentos s√£o definidos de acordo com as regras de entrada e sa√≠da de dados da API.

// Anota a√≠ üñä: Em uma API, o conceito definido por essas regras √© chamado de contrato. O contrato define aquilo que foi previamente acordado, ou seja, como a API dever√° se comportar em um determinado cen√°rio.

// Para ficar ainda mais n√≠tido, vamos utilizar novamente o endpoint GET /users/:userId. Podemos dizer que o contrato dele √©: quando a pessoa usu√°ria existe, retornar a seguinte resposta:
// - C√≥digo HTTP: 200 - OK;
// - Body:

// A API Cacau Trybe ser√° composta por tr√™s endpoints, representados pelos seguintes contratos:

üëâ GET /chocolates

// - Objetivo: Retornar uma lista com todos os chocolates cadastrados.
// - C√≥digo HTTP: 200 - OK;
// - Body (exemplo):
[
  { "id": 1, "name": "Mint Intense", "brandId": 1 },
  { "id": 2, "name": "White Coconut", "brandId": 1 },
  { "id": 3, "name": "Mon Ch√©ri", "brandId": 2 },
  { "id": 4, "name": "Mounds", "brandId": 3 }
]

üëâ GET /chocolates/:id

// - Objetivo: Buscar um chocolate espec√≠fico pelo ID.
// - C√≥digo HTTP: 200 - OK;
// - Body (exemplo):
[
  {
    "id": 4,
    "name": "Mounds",
    "brandId": 3
  }
]

üëâ GET /chocolates/brand/:brandId

// - Objetivo: Buscar uma lista de chocolates pelo ID (brandId) da marca.
// - C√≥digo HTTP: 200 - OK;
// - Body (exemplo):
[
  {
      "id": 1,
      "name": "Mint Intense",
      "brandId": 1
  },
  {
      "id": 2,
      "name": "White Coconut",
      "brandId": 1
  }
]

////////////////////////////////////////////////////////////////////////////////////////////////////////

ESTRUTURA DE PASTA

.
‚îú‚îÄ‚îÄ src
‚îú‚îÄ‚îÄ tests/
‚îÇ   ‚îî‚îÄ‚îÄ integration/
‚îÇ       ‚îî‚îÄ‚îÄ chocolates.test.js
‚îî‚îÄ‚îÄ package.json

CONFIGURAR SCRIPT DE TESTE
//package.json
"scripts": {
  "test": "mocha tests/**/*.test.js --exit"
},

// ‚ö†Ô∏è Aviso: Para nos ajudar com esse desafio, utilizaremos o plugin Chai HTTP! Com ele poderemos simular uma request a nossa API sem inicializ√°-la manualmente.

////////////////////////////////////////////////////////////////////////////////////////////////////////

DUBLES DE TESTE

// Para evitar de alterar os dados reais, criamos dubles dos nossos dados para realizar nossos testes

// ‚ö†Ô∏è Aviso: Vale ressaltar que o dubl√™ de teste n√£o se restringe a fun√ß√µes espec√≠ficas, como a leitura com o fs. O que precisamos ter em mente, ao definir um dubl√™, √© o motivo pelo qual estamos isolando essa fun√ß√£o.

// ferramenta Sinon, a qual fornece fun√ß√µes para diversos tipos dos Test Doubles.
// npm install -D sinon@14.0

stub // Stubs s√£o objetos que podemos utilizar para simular intera√ß√µes com depend√™ncias externas ao que estamos testando de fato.

// Anota a√≠ üñä: A fun√ß√£o restore() desempenha um papel muito importante quando utilizamos stubs, pois √© ela que vai garantir que o stub de um teste n√£o seja replicado para os testes seguintes.