SISTEMA DE MODULOS

/*
Anota a√≠ üñä: um m√≥dulo em Node.js √© um ‚Äúpeda√ßo de c√≥digo‚Äù, o qual pode ser organizado em um ou mais arquivos, que possui escopo pr√≥prio. Ou seja, suas vari√°veis, fun√ß√µes, classes e afins s√≥ est√£o dispon√≠veis nos arquivos que fazem parte daquele m√≥dul

um m√≥dulo √© uma funcionalidade, ou um conjunto de funcionalidades, que se encontram isoladas do restante do c√≥digo. O Node.js possui tr√™s tipos de m√≥dulos: internos, locais e de terceiros.

MODULOS INTERNOS:

Os m√≥dulos internos (ou core modules) s√£o inclusos no Node.js e instalados junto com ele quando baixamos o runtime. Alguns exemplos de core modules s√£o:

fs: fornece uma API para interagir com o sistema de arquivos de forma geral;

url: prov√™ utilit√°rios para ler e manipular URLs;

util: oferece ferramentas e funcionalidades comumente √∫teis a pessoas programadoras.

os: oferece ferramentas e funcionalidades relacionadas ao sistema operacional.


MODULOS LOCAIS:

s√£o aqueles definidos juntamente √† nossa aplica√ß√£o. Eles representam as funcionalidades ou partes do nosso programa que foram separados em arquivos diferentes. Podem ser publicados no NPM, para que outras pessoas possam baix√°-los e utiliz√°-los


MODULOS DE TERCEIROS

Os m√≥dulos de terceiros s√£o aqueles criados por outras pessoas desenvolvedoras e disponibilizados para uso por meio do npm.
*/

/////////////////////////////////////////////////////////////////////////////////////////////////////

MANEIRAS DE IMPORTAR E EXPORTAR MODULOS

/*
Quando queremos utilizar o conte√∫do de um m√≥dulo ou pacote de outro arquivo no Node.js, precisamos importar esse m√≥dulo/pacote para o contexto atual no qual estamos.

Para isso, existem dois sistemas de m√≥dulos difundidos na comunidade JavaScript:

- M√≥dulos ES6;

- M√≥dulos CommonJS:
*/
// No CommonJS as palavras-chaves utilizadas para importa√ß√£o e exporta√ß√£o de m√≥dulos s√£o:
require(); // importar
module.exports; // exportar

/////////////////////////////////////////////////////////////////////////////////////////////////////

EXPORTANDO MODULOS
//Para exportar algo no sistema CommonJS, utilizamos a vari√°vel global module.exports, atribuindo a ela o valor que desejamos exportar:
// brlValue.js
// const brl = 5.37;

module.exports = brl;
/////////////////////////////////////////////////////
// brlValue.js
const brls = 5.37;

// const usdToBrl = (valueInUsd) => valueInUsd * brls;

module.exports = usdToBrl;

// üí™Agora,vamos trazer isso para a pr√°tica!

// Imagine que estamos exportando uma fun√ß√£o, de modo que podemos utiliz√°-la para converter um valor em d√≥lares para outro valor,neste caso em reais.
// index.js
const convert = require('./brlValue');

const usd = 10;
const brl = convert(usd);

console.log(brl) // 53.7


/////////////////////////////////////////////////////////////////////////////////////////////////////
EXPORTANDO + DE UMA ENTIDADE(variaveis, funcoes, etc)
// brlValue.js
// const brl = 5.37;

const usdToBrl = (valueInUsd) => valueInUsd * brl;

module.exports = {
  brl,
  usdToBrl,
};

// importarmos o m√≥dulo receberemos o seguinte objeto como resposta:
// index.js
const brlValue = require('./brlValue');

console.log(brlValue); // { brl: 5.37, usdToBrl: [Function: usdToBrl] }

console.log(`Valor do d√≥lar: ${brlValue.brl}`); // Valor do d√≥lar: 5.37
console.log(`10 d√≥lares em reais: ${brlValue.usdToBrl(10)}`); // 10 d√≥lares em reais: 53.7

// Como estamos lidando com um objeto, podemos utilizar object destructuring para transformar as propriedades do objeto importado em constantes no escopo global:
const { brl, usdToBrl } = require('./brlValue');

console.log(`Valor do d√≥lar: ${brl}`); // Valor do d√≥lar: 5.37
console.log(`10 d√≥lares em reais: ${usdToBrl(10)}`); // 10 d√≥lares em reais: 53.7


/////////////////////////////////////////////////////////////////////////////////////////////////////
IMPORTANDO MODULOS

// MODULOS LOCAIS
// importar um m√≥dulo local, precisamos passar para o require o caminho do m√≥dulo, seguindo a mesma assinatura.
require('./meuModulo')

//podemos importar uma pasta. Isso √© √∫til, pois muitas vezes um m√≥dulo est√° dividido em v√°rios arquivos, por√©m, desejamos importar todas as suas funcionalidades de uma √∫nica vez. Nesse caso, a pasta precisa conter um arquivo chamado index.js, o qual importa cada um dos arquivos do m√≥dulo e os exporta da forma mais conveniente.
//Por exemplo:

// meuModulo/funcionalidade-1.js
module.exports = function () {
  console.log('funcionalidade1');
}

// meuModulo/funcionalidade-2.js
module.exports = function () {
  console.log('funcionalidade2');
}

// meuModulo/index.js
const funcionalidade1 = require('./funcionalidade-1');
const funcionalidade2 = require('./funcionalidade-2');

module.exports = { funcionalidade1, funcionalidade2 };

//Para importarmos e utilizarmos o m√≥dulo meuModulo, basta passar o caminho da pasta como argumento para a fun√ß√£o require, desse modo:
// minha-aplicacao/index.js
const meuModulo = require('./meuModulo');

console.log(meuModulo); // { funcionalidade1: [Function: funcionalidade1], funcionalidade2: [Function: funcionalidade2] }

meuModulo.funcionalidade1();


//MODULOS INTERNOS
//devemos passar o nome do pacote como par√¢metro para a fun√ß√£o require. Por exemplo, require('fs') importa o pacote fs, respons√°vel pelo sistema de arquivos.

const fs = require('fs');
const { NOTIMP } = require('dns')

fs.readFileSync('./meuArquivo.txt');

//MODULOS DE TERCEIROS
// M√≥dulos de terceiros s√£o importados da mesma forma que os m√≥dulos internos: passando seu nome como par√¢metro para a fun√ß√£o require. A diferen√ßa √© que, como esses m√≥dulos n√£o s√£o nativos do Node.js, precisamos primeiro instal√°-los na pasta do projeto em que queremos utiliz√°-los.

//Anota a√≠ üñä: O registro oficial do Node.js, em que milhares de pacotes est√£o dispon√≠veis para serem instalados, √© o npm. Al√©m disso, npm tamb√©m √© o nome da ferramenta de linha de comando (CLI - command line interface), respons√°vel por baixar e instalar esses pacotes. O CLI npm √© instalado juntamente com o Node.js.

/////////////////////////////////////////////////////////////////////////////////////////////////////

NPM

//O NPM (sigla para Node Package Manager) √© o reposit√≥rio oficial para publica√ß√£o de pacotes Node.js.

//Anota a√≠ üñä: Um pacote √© um conjunto de arquivos que exportam um ou mais m√≥dulos Node. Nem todo pacote Node √© uma biblioteca, visto que uma API desenvolvida em Node tamb√©m tem um pacote.

// NPM INIT
npm init // Permite criar de forma r√°pida e simplificada de um novo pacote Node.js na pasta onde √© executado, cria um arquivo chamado package.json com as respostas das perguntas realizadas e mais alguns campos de metadados.

npm init -y // cria com informa√ß√µes padr√£o sobre o pacote(nome, versao, nome dos autores,etc)

// Para o Node.js, qualquer pasta contendo um arquivo package.json v√°lido √© um pacote.

// NPM RUN
//O comando run faz com que o npm execute um determinado script configurado no package.json. Scripts s√£o ‚Äúatalhos‚Äù que podemos definir para executar determinadas tarefas relacionadas ao pacote atual.

//Por exemplo, para ter um script chamado lint que execute a ferramenta de linter que usamos aqui na Trybe, o ESLint, nossa chave scripts fica assim:
{
  "scripts": {
    "lint": "eslint ."
  }
}

// NPM START
//O comando npm start age como um ‚Äúatalho‚Äù para o comando npm run start, uma vez que sua fun√ß√£o √© executar o script start definido no package.json.

//Como conven√ß√£o, todo pacote que pode ser executado pelo terminal (como CLIs, APIs e afins) deve ter um script start com o comando necess√°rio para executar a aplica√ß√£o principal daquele pacote.

// Por exemplo: se tivermos um pacote que calcula o IMC (√çndice de Massa Corporal) de uma pessoa cujo c√≥digo est√° no arquivo imc.js, √© comum criarmos o seguinte script:
{
  // ...
  "scripts": {
    "start": "node imc.js"
  }
  // ...
}

// NPM INSTALL
//√© o respons√°vel por baixar e instalar pacotes Node.js do NPM para o nosso pacote.Vamos descobrir algumas formas de us√°-lo:

npm install <nome do pacote>// baixa o pacote do registro do NPM e o adiciona ao objeto dependencies do package.json;

npm install -D <nome do pacote>// baixa o pacote do registro do NPM, por√©m o adiciona ao objeto devDependencies do package.json, indicando que o pacote em quest√£o n√£o √© necess√°rio para executar a aplica√ß√£o. Ele √© necess√°rio para desenvolvimento, ou seja, para alterar o c√≥digo daquela aplica√ß√£o. Isso √© muito √∫til ao colocar a aplica√ß√£o no ar, pois pacotes marcados como devDependencies podem ser ignorados, j√° que vamos apenas executar a aplica√ß√£o, e n√£o modific√°-la.

npm install // baixa e instala todos os pacotes listados nos objetos de dependencies e devDependencies do package.json. Sempre deve ser executado ao clonar o reposit√≥rio de um pacote para garantir que todas as depend√™ncias desse pacote est√£o instaladas.

/////////////////////////////////////////////////////////////////////////////////////////////////////

